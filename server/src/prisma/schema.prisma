// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String // Hashat lösenord
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationer
  accounts        Account[]
  budgets         Budget[]
  transactions    Transaction[]
  categories      Category[]
  bankConnections BankConnection[]
}

model Account {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(255) // T.ex. "Sparbank", "Kreditkort"
  balance    Float       @default(0.0) // Nuvarande saldo
  type       AccountType  // Kontotyp, ex. Savings, Credit
  externalId String      @unique // Externt ID från banken (ska vara unikt)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relationer
  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model Transaction {
  id          Int      @id @default(autoincrement())
  date        DateTime @default(now())
  amount      Float // Positiva för inkomster, negativa för utgifter
  description String? // Beskrivning av transaktionen
  categoryId  Int?
  accountId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationer
  account  Account   @relation(fields: [accountId], references: [id])
  category Category? @relation(fields: [categoryId], references: [id])
  userId   Int
  user     User      @relation(fields: [userId], references: [id])
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255) // T.ex. "Mat", "Hyra", "Transport"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationer
  transactions Transaction[]
  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  budgets      Budget[]      @relation("CategoryBudgets") // Lägg till denna relation
}

model Budget {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255) // T.ex. "Matbudget för Januari"
  amount    Float // Budgeterat belopp
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationer
  userId     Int
  user       User       @relation(fields: [userId], references: [id])
  categories Category[] @relation("CategoryBudgets") // Lägg till denna relation
}

model BankConnection {
  id            Int      @id @default(autoincrement())
  userId        Int
  bankId        String
  institutionId String
  createdAt     DateTime @default(now())

  User            User             @relation(fields: [userId], references: [id])
  PendingAccounts PendingAccount[]
}

model PendingAccount {
  id               Int            @id @default(autoincrement())
  externalId       String         @unique // Externt ID från banken
  bankConnectionId Int
  bankConnection   BankConnection @relation(fields: [bankConnectionId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

enum AccountType {
  Savings
  Checking
  Credit
  Investment
}
